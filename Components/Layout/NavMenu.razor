@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IModeService ModeService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ManualApp</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @if (isAuthenticated)
        {
            @if (canSwitchMode)
            {
                <div class="nav-item px-3">
                    <div class="nav-link text-info">
                        <span class="bi bi-people-fill-nav-menu" aria-hidden="true"></span>
                        @(isGroupMode ? "グループモード" : "個人モード")
                    </div>
                </div>
            }
            
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="manuals">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> マニュアル一覧
                </NavLink>
            </div>
            <div class="nav-item px-3 btn-mobile-hidden">
                <NavLink class="nav-link" href="categories">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> カテゴリー管理
                </NavLink>
            </div>
            <div class="nav-item px-3 btn-mobile-hidden">
                <NavLink class="nav-link" href="groups">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> グループ管理
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool isAuthenticated = false;
    private bool canSwitchMode = false;
    private bool isGroupMode = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
            
            if (isAuthenticated)
            {
                // 現在のモードを取得（データベースアクセスなし）
                isGroupMode = ModeService.CurrentMode == ViewMode.Group;
                
                // グループモード切替可能性をチェック
                try
                {
                    canSwitchMode = await ModeService.CanSwitchToGroupModeAsync();
                }
                catch (Exception)
                {
                    canSwitchMode = false;
                }
            }
            else
            {
                canSwitchMode = false;
                isGroupMode = true;
            }
        }
        catch (Exception)
        {
            isAuthenticated = false;
            canSwitchMode = false;
            isGroupMode = true;
        }
    }

}

