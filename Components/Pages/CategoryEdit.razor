@page "/categories/edit"
@page "/categories/edit/{Id:int}"
@rendermode InteractiveServer
@attribute [Authorize]
@inject CategoryService CategoryService
@inject NavigationManager Navigation

<h3>@(IsEdit ? "カテゴリー編集" : "新しいカテゴリー")</h3>

<EditForm Model="category" OnValidSubmit="SaveCategory">
    <DataAnnotationsValidator />
    
    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label for="name" class="form-label">名前 <span class="text-danger">*</span></label>
                <InputText id="name" class="form-control" @bind-Value="category.Name" />
                <ValidationMessage For="@(() => category.Name)" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="mb-3">
                <label for="description" class="form-label">説明</label>
                <InputTextArea id="description" class="form-control" rows="3" @bind-Value="category.Description" />
                <ValidationMessage For="@(() => category.Description)" />
            </div>
        </div>
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary me-2" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            <span class="bi bi-save"></span> 保存
        </button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@isSaving">
            <span class="bi bi-x-circle"></span> 取消
        </button>
    </div>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    
    private Category category = new();
    private bool isSaving = false;
    private bool IsEdit => Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            var existingCategory = await CategoryService.GetCategoryByIdAsync(Id.Value);
            if (existingCategory is not null)
            {
                if (existingCategory.IsDefault)
                {
                    Navigation.NavigateTo("/categories");
                    return;
                }
                category = existingCategory;
            }
            else
            {
                Navigation.NavigateTo("/categories");
                return;
            }
        }
    }

    private async Task SaveCategory()
    {
        isSaving = true;
        try
        {
            if (IsEdit)
            {
                await CategoryService.UpdateCategoryAsync(category);
            }
            else
            {
                await CategoryService.AddCategoryAsync(category);
            }
            
            Navigation.NavigateTo("/categories");
        }
        catch (Exception ex)
        {
            // エラーハンドリング（実際のアプリケーションでは適切なエラー表示を行う）
            Console.WriteLine($"エラー: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/categories");
    }
}
