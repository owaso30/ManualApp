@page "/manuals/view/{ManualId:int}"
@rendermode InteractiveServer
@attribute [Authorize]
@using ManualApp.Components
@inject ManualService ManualService
@inject ContentService ContentService
@inject ICurrentUserService CurrentUserService
@inject NavigationManager Navigation
@inject IPdfService PdfService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService

<RadzenDialog />

<div style="position: relative;">
    <h3>@manual?.Title</h3>

    <div class="mb-3 d-flex justify-content-between align-items-center sticky-top bg-white py-2" style="z-index: 1000; border-bottom: 1px solid #dee2e6;">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="sortDescending" checked="@isDescending" @onchange="OnSortChanged" />
            <label class="form-check-label" for="sortDescending">
                降順ソート
            </label>
        </div>
        <div class="d-flex">
            <button class="btn btn-primary btn-mobile-hidden" @onclick="AddContent">
                <span class="bi bi-plus-circle"></span> 追加
            </button>
            <button class="btn btn-success ms-2" @onclick="DownloadPdf" disabled="@isGeneratingPdf">
                @if (isGeneratingPdf)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                else
                {
                    <span class="bi bi-file-earmark-pdf me-2"></span>
                }
                出力
            </button>
            <button class="btn btn-secondary ms-2" @onclick="BackToList">
                <span class="bi bi-arrow-left"></span> 戻る
            </button>
        </div>
    </div>

    @if (contents.Any())
    {
        <div class="row">
            @for (int i = 0; i < contents.Count; i += 2)
            {
                <div class="col-12 col-lg-6 mb-4">
                    @if (i < contents.Count)
                    {
                        @RenderContentCard(contents[i])
                    }
                </div>
                
                @if (i + 1 < contents.Count)
                {
                    <div class="col-12 col-lg-6 mb-4">
                        @RenderContentCard(contents[i + 1])
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <span class="bi bi-info-circle"></span> コンテンツがありません。新しいコンテンツを追加してください。
        </div>
    }

    @if (isLoading)
    {
        <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: white; display: flex; align-items: flex-start; justify-content: center; z-index: 9999; padding-top: 200px;">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">読み込み中...</span>
                </div>
                <div class="mt-3 fs-5">読み込み中...</div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int ManualId { get; set; }
    
    private Manual? manual;
    private List<Content> contents = new();
    private bool isLoading = true;
    private bool isGeneratingPdf = false;
    private bool isDescending = false;
    private bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
            isFirstRender = false;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // パラメータが変更された場合（ナビゲーション時）にデータを再読み込み
        if (!isFirstRender)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            // セッションストレージからソート状態を復元
            await RestoreSortState();
            
            manual = await ManualService.GetManualByIdAsync(ManualId);
            if (manual == null)
            {
                Navigation.NavigateTo("/manuals");
                return;
            }

            var contentsEnumerable = await ContentService.GetContentsByManualIdAsync(ManualId);
            contents = contentsEnumerable.ToList();
            SortContents();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SortContents()
    {
        if (isDescending)
        {
            contents = contents.OrderByDescending(c => c.Order).ToList();
        }
        else
        {
            contents = contents.OrderBy(c => c.Order).ToList();
        }
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        isDescending = (bool)e.Value!;
        
        // セッションストレージにソート状態を保存
        try
        {
            await JSRuntime.InvokeVoidAsync("setSessionStorage", "manualContent_sortDescending", isDescending.ToString().ToLower());
        }
        catch
        {
            // セッションストレージへの保存に失敗した場合は無視
        }
        
        SortContents();
        await InvokeAsync(StateHasChanged);
    }

    private async Task RestoreSortState()
    {
        try
        {
            var savedSortState = await JSRuntime.InvokeAsync<string>("getSessionStorage", "manualContent_sortDescending");
            if (!string.IsNullOrEmpty(savedSortState) && bool.TryParse(savedSortState, out bool savedIsDescending))
            {
                isDescending = savedIsDescending;
            }
        }
        catch
        {
            // セッションストレージからの復元に失敗した場合はデフォルト値を使用
            isDescending = false;
        }
    }

    private RenderFragment RenderContentCard(Content content) => @<div class="card h-100">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">手順 @content.Order</h5>
            <div>
                <button class="btn btn-sm btn-outline-secondary me-1" 
                        @onclick="() => MoveUp(content.ContentId)"
                        disabled="@(content.Order == 1)">
                    前へ
                </button>
                <button class="btn btn-sm btn-outline-secondary me-1" 
                        @onclick="() => MoveDown(content.ContentId)"
                        disabled="@(content.Order == contents.Count)">
                    後へ
                </button>
                <button class="btn btn-sm btn-outline-primary me-1 btn-mobile-hidden" @onclick="() => EditContent(content.ContentId)">
                    <span class="bi bi-pencil"></span> 編集
                </button>
                <button class="btn btn-sm btn-outline-danger btn-mobile-hidden" @onclick="() => DeleteContent(content.ContentId)">
                    <span class="bi bi-trash"></span> 削除
                </button>
            </div>
        </div>
        <div class="card-body d-flex flex-column p-0">
            <div style="height: 340px; position: relative;">
                @if (content.Image != null)
                {
                    <div class="text-center h-100 d-flex align-items-center justify-content-center" style="background-color: #f8f9fa;">
                        <img src="@content.Image.FilePath" class="img-fluid rounded" alt="コンテンツ画像" style="max-height: 100%; max-width: 100%; object-fit: contain;" />
                        <button class="btn btn-light btn-sm position-absolute top-0 end-0 m-2" 
                                @onclick="() => ShowImagePopup(content.Image.FilePath)"
                                style="z-index: 10; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">
                            <span class="bi bi-zoom-in"></span>
                        </button>
                    </div>
                }
                else
                {
                    <div class="text-center text-muted h-100 d-flex flex-column align-items-center justify-content-center" style="background-color: #f8f9fa;">
                        <span class="bi bi-image" style="font-size: 3rem;"></span>
                        <p>画像なし</p>
                    </div>
                }
            </div>
            <div class="p-3" style="height: 170px; overflow-y: auto;">
                <div class="content-text">
                    @if (string.IsNullOrEmpty(content.Text))
                    {
                        <em class="text-muted">コンテンツがありません</em>
                    }
                    else
                    {
                        @((MarkupString)content.Text.Replace("\n", "<br/>"))
                    }
                </div>
            </div>
        </div>
    </div>;

    private void AddContent()
    {
        Navigation.NavigateTo($"/manuals/{ManualId}/content/edit");
    }

    private void EditContent(int contentId)
    {
        Navigation.NavigateTo($"/manuals/{ManualId}/content/edit/{contentId}");
    }

    private async Task DeleteContent(int contentId)
    {
        var result = await ContentService.DeleteContentAsync(contentId);
        if (result)
        {
            await LoadData();
        }
    }

    private async Task MoveUp(int contentId)
    {
        await MoveContent(contentId, ContentService.MoveContentUpAsync);
    }

    private async Task MoveDown(int contentId)
    {
        await MoveContent(contentId, ContentService.MoveContentDownAsync);
    }

    private async Task MoveContent(int contentId, Func<int, Task<bool>> moveAction)
    {
        try
        {
            var result = await moveAction(contentId);
            if (result)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"コンテンツ移動エラー: {ex.Message}");
        }
    }

    private async Task DownloadPdf()
    {
        if (manual == null || !contents.Any()) return;

        isGeneratingPdf = true;
        try
        {
            var pdfBytes = await PdfService.GenerateManualPdfAsync(manual, contents);
            var fileName = $"{manual.Title?.Replace(" ", "_") ?? "マニュアル"}_{DateTime.Now:yyyyMMdd}.pdf";
            
            // JavaScriptでファイルダウンロードを実行
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfBytes));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PDF生成エラー: {ex.Message}");
        }
        finally
        {
            isGeneratingPdf = false;
        }
    }

    private void BackToList()
    {
        Navigation.NavigateTo("/manuals");
    }

    private async Task ShowImagePopup(string imagePath)
    {
        // レスポンシブ対応のダイアログ設定
        var dialogOptions = new DialogOptions() { 
            Width = "95vw", 
            Height = "95vh", 
            Left = "2.5vw", 
            Top = "2.5vh",
            Resizable = true, 
            Draggable = true,
            CloseDialogOnEsc = true,
            CloseDialogOnOverlayClick = true
        };

        await DialogService.OpenAsync("", ds =>
            @<div class="text-center">
                <img src="@imagePath" class="img-fluid" alt="拡大画像" style="max-height: 80vh; max-width: 100%; object-fit: contain;" />
            </div>,
            dialogOptions);
    }
}