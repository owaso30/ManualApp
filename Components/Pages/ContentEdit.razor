@page "/manuals/{ManualId:int}/content/edit"
@page "/manuals/{ManualId:int}/content/edit/{Id:int}"
@rendermode InteractiveServer
@attribute [Authorize]
@implements IDisposable
@using ManualApp.Services
@using ManualApp.Models
@inject ContentService ContentService
@inject ManualService ManualService
@inject CategoryService CategoryService
@inject ICurrentUserService CurrentUserService
@inject S3Service S3Service
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject DialogService DialogService
@inject IGroupService GroupService

<RadzenDialog />

<!-- モバイル制限メッセージ -->
<div class="mobile-restriction-message">
    <div class="mobile-restriction-content">
        <i class="fas fa-mobile-alt mobile-restriction-icon"></i>
        <div class="mobile-restriction-title">モバイル表示では利用できません</div>
        <div class="mobile-restriction-text">
            この機能はデスクトップ表示でのみご利用いただけます。<br>
            画面幅を広げるか、デスクトップブラウザでアクセスしてください。
        </div>
        <a href="/" class="btn btn-primary">ホームに戻る</a>
    </div>
</div>

<div class="mobile-restricted-content" style="position: relative;">
    <h3>@(IsEdit ? "コンテンツ編集" : "コンテンツ追加")</h3>
    
    @if (!IsEdit && existingContents.Any())
{
    var latestContent = existingContents.First();
    <div class="mb-4 d-none d-lg-block">
        <div class="row">
            <div class="col-12 col-lg-6">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #17a2b8; color: white;">
                        <h5 class="mb-0">手順 @(latestContent.Order + 1)（追加する手順）</h5>
                        <div>
                            <button type="submit" class="btn btn-sm me-2" style="background-color: #28a745; border: 1px solid white; color: white;" disabled="@isSaving" form="content-form">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <span class="bi bi-save"></span> 保存
                            </button>
                            <button type="button" class="btn btn-sm" style="background-color: #6c757d; border: 1px solid white; color: white;" @onclick="Cancel" disabled="@isSaving">
                                <span class="bi bi-x-circle"></span> 取消
                            </button>
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column p-0">
                        <!-- 画像エリア -->
                        <div style="height: 480px; position: relative; overflow: hidden;">
                            <div class="border rounded h-100 d-flex flex-column align-items-center justify-content-center" style="background-color: #f8f9fa; padding: 10px;"
                                 @onpaste="OnPaste" 
                                 @onkeydown="OnKeyDown"
                                 tabindex="0">
                                @if (content.Image != null && !string.IsNullOrEmpty(content.Image.FilePath))
                                {
                                    <div style="flex: 1; display: flex; align-items: center; justify-content: center; max-height: calc(100% - 120px);">
                                        <img id="content-image" src="@content.Image.FilePath" class="img-fluid rounded" alt="コンテンツ画像" style="max-height: 100%; max-width: 100%; object-fit: contain;" 
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                        <div class="text-muted" style="flex: 1; display: none; flex-direction: column; align-items: center; justify-content: center; padding: 2rem;">
                                            <div style="width: 80px; height: 80px; border: 2px dashed #dee2e6; border-radius: 12px; display: flex; align-items: center; justify-content: center; background-color: #f8f9fa; margin-bottom: 1rem;">
                                                <span class="bi bi-cloud-upload" style="font-size: 2rem; color: #6c757d;"></span>
                                            </div>
                                            <h6 class="mb-2" style="color: #495057; font-weight: 500;">画像をアップロード</h6>
                                            <p class="mb-0" style="font-size: 0.875rem; color: #6c757d;">ファイルを選択するか、ドラッグ&ドロップ</p>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-muted" style="flex: 1; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 2rem;">
                                        <div style="width: 80px; height: 80px; border: 2px dashed #dee2e6; border-radius: 12px; display: flex; align-items: center; justify-content: center; background-color: #f8f9fa; margin-bottom: 1rem;">
                                            <span class="bi bi-cloud-upload" style="font-size: 2rem; color: #6c757d;"></span>
                                        </div>
                                        <h6 class="mb-2" style="color: #495057; font-weight: 500;">画像をアップロード</h6>
                                        <p class="mb-0" style="font-size: 0.875rem; color: #6c757d;">ファイルを選択するか、ドラッグ&ドロップ</p>
                                    </div>
                                }
                                
                                @if (isUploading)
                                {
                                    <div class="text-center mt-2" style="height: 60px; display: flex; align-items: center; justify-content: center;">
                                        <div class="spinner-border spinner-border-sm me-2"></div>
                                        <small>アップロード中...</small>
                                    </div>
                                }
                                else
                                {
                                    <div class="mt-2" style="height: 120px; display: flex; flex-direction: column; justify-content: center;">
                                        <InputFile OnChange="OnFileSelected" accept="image/*" class="form-control form-control-sm mb-2" />
                                        <div class="d-grid gap-1">
                                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="OpenImageAnnotator">
                                                <span class="bi bi-pencil-square"></span> 加工して貼り付け
                                            </button>
                                            @if (content.Image != null)
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="RemoveImage">
                                                    <span class="bi bi-trash"></span> 画像を削除
                                                </button>
                                            }
                                        </div>
                                        <small class="form-text text-muted text-center">画像ファイルを選択するか、Ctrl+Vでクリップボードから貼り付け</small>
                                    </div>
                                }
                            </div>
                        </div>
                        <!-- コンテンツエリア -->
                        <div class="p-3" style="height: 250px; overflow-y: auto;">
                            <label for="text" class="form-label">コンテンツ</label>
                            <InputTextArea id="text" class="form-control" rows="6" @bind-Value="content.Text" @onkeydown="OnTextKeyDown" maxlength="200" />
                            <div class="form-text text-muted">改行は最大5回まで。最大200文字まで</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12 col-lg-6">
                <div class="card h-100">
                    <div class="card-header" style="background-color: #6c757d; color: white;">
                        <h5 class="mb-0">手順 @latestContent.Order（直前の手順）</h5>
                    </div>
                    <div class="card-body d-flex flex-column p-0">
                        <div style="height: 340px; position: relative;">
                            @if (latestContent.Image != null && !string.IsNullOrEmpty(latestContent.Image.FilePath))
                            {
                                <div class="text-center h-100 d-flex align-items-center justify-content-center" style="background-color: #f8f9fa;">
                                    <img src="@latestContent.Image.FilePath" class="img-fluid rounded" alt="コンテンツ画像" style="max-height: 100%; max-width: 100%; object-fit: contain;" />
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-muted h-100 d-flex flex-column align-items-center justify-content-center" style="background-color: #f8f9fa; padding: 2rem;">
                                    <div style="width: 60px; height: 60px; border: 2px dashed #dee2e6; border-radius: 8px; display: flex; align-items: center; justify-content: center; background-color: white; margin-bottom: 1rem;">
                                        <span class="bi bi-image" style="font-size: 1.5rem; color: #6c757d;"></span>
                                    </div>
                                    <h6 class="mb-1" style="color: #495057; font-weight: 500; font-size: 0.9rem;">画像なし</h6>
                                    <p class="mb-0" style="font-size: 0.75rem; color: #6c757d;">画像が設定されていません</p>
                                </div>
                            }
                        </div>
                        <div class="p-3" style="height: 170px; overflow-y: auto;">
                            <div class="content-text">
                                @if (string.IsNullOrEmpty(latestContent.Text))
                                {
                                    <em class="text-muted">コンテンツがありません</em>
                                }
                                else
                                {
                                    @((MarkupString)latestContent.Text.Replace("\n", "<br/>"))
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<EditForm Model="content" OnValidSubmit="SaveContent" id="content-form">
    <DataAnnotationsValidator />
    
    @if (IsEdit || !existingContents.Any())
    {
        <div class="row justify-content-center">
            <div class="col-12 col-lg-6">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center" style="background-color: @(IsEdit ? "#d4a574" : "#17a2b8"); color: white;">
                        <h5 class="mb-0">手順 @content.Order（@(IsEdit ? "編集中" : "追加する手順")）</h5>
                        <div>
                            <button type="submit" class="btn btn-sm me-2" style="background-color: #28a745; border: 1px solid white; color: white;" disabled="@isSaving" form="content-form">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <span class="bi bi-save"></span> 保存
                            </button>
                            <button type="button" class="btn btn-sm" style="background-color: #6c757d; border: 1px solid white; color: white;" @onclick="Cancel" disabled="@isSaving">
                                <span class="bi bi-x-circle"></span> 取消
                            </button>
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column p-0">
                        <!-- 画像エリア -->
                        <div style="height: 480px; position: relative; overflow: hidden;">
                            <div class="border rounded h-100 d-flex flex-column align-items-center justify-content-center" style="background-color: #f8f9fa; padding: 10px;"
                                 @onpaste="OnPaste" 
                                 @onkeydown="OnKeyDown"
                                 tabindex="0">
                                @if (content.Image != null && !string.IsNullOrEmpty(content.Image.FilePath))
                                {
                                    <div style="flex: 1; display: flex; align-items: center; justify-content: center; max-height: calc(100% - 120px);">
                                        <img id="content-image" src="@content.Image.FilePath" class="img-fluid rounded" alt="コンテンツ画像" style="max-height: 100%; max-width: 100%; object-fit: contain;" 
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                        <div class="text-muted" style="flex: 1; display: none; flex-direction: column; align-items: center; justify-content: center; padding: 2rem;">
                                            <div style="width: 80px; height: 80px; border: 2px dashed #dee2e6; border-radius: 12px; display: flex; align-items: center; justify-content: center; background-color: #f8f9fa; margin-bottom: 1rem;">
                                                <span class="bi bi-cloud-upload" style="font-size: 2rem; color: #6c757d;"></span>
                                            </div>
                                            <h6 class="mb-2" style="color: #495057; font-weight: 500;">画像をアップロード</h6>
                                            <p class="mb-0" style="font-size: 0.875rem; color: #6c757d;">ファイルを選択するか、ドラッグ&ドロップ</p>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-muted" style="flex: 1; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 2rem;">
                                        <div style="width: 80px; height: 80px; border: 2px dashed #dee2e6; border-radius: 12px; display: flex; align-items: center; justify-content: center; background-color: #f8f9fa; margin-bottom: 1rem;">
                                            <span class="bi bi-cloud-upload" style="font-size: 2rem; color: #6c757d;"></span>
                                        </div>
                                        <h6 class="mb-2" style="color: #495057; font-weight: 500;">画像をアップロード</h6>
                                        <p class="mb-0" style="font-size: 0.875rem; color: #6c757d;">ファイルを選択するか、ドラッグ&ドロップ</p>
                                    </div>
                                }
                                
                                @if (isUploading)
                                {
                                    <div class="text-center mt-2" style="height: 60px; display: flex; align-items: center; justify-content: center;">
                                        <div class="spinner-border spinner-border-sm me-2"></div>
                                        <small>アップロード中...</small>
                                    </div>
                                }
                                else
                                {
                                    <div class="mt-2" style="height: 120px; display: flex; flex-direction: column; justify-content: center;">
                                        <InputFile OnChange="OnFileSelected" accept="image/*" class="form-control form-control-sm mb-2" />
                                        <div class="d-grid gap-1">
                                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="OpenImageAnnotator">
                                                <span class="bi bi-pencil-square"></span> 加工して貼り付け
                                            </button>
                                            @if (content.Image != null)
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="RemoveImage">
                                                    <span class="bi bi-trash"></span> 画像を削除
                                                </button>
                                            }
                                        </div>
                                        <small class="form-text text-muted text-center">画像ファイルを選択するか、Ctrl+Vでクリップボードから貼り付け</small>
                                    </div>
                                }
                            </div>
                        </div>
                        <!-- コンテンツエリア -->
                        <div class="p-3" style="height: 250px; overflow-y: auto;">
                            <label for="text" class="form-label">コンテンツ</label>
                            <InputTextArea id="text" class="form-control" rows="6" @bind-Value="content.Text" @onkeydown="OnTextKeyDown" maxlength="200" />
                            <div class="form-text text-muted">改行は最大5回まで。最大200文字まで</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</EditForm>

    @if (isLoading)
    {
        <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: white; display: flex; align-items: center; justify-content: center; z-index: 9999;">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">読み込み中...</span>
                </div>
                <div class="mt-3">
                    <h5>読み込み中...</h5>
                    <p class="text-muted">しばらくお待ちください</p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int ManualId { get; set; }
    [Parameter] public int? Id { get; set; }
    
    private Content content = new() 
    { 
        ManualId = 0, // デバッグ用に初期値を明示
        Image = new Image { FilePath = "", ImageId = 0 } // 空のImageオブジェクトで初期化
    };
    private Manual? manual;
    private List<Content> existingContents = new();
    private bool isSaving = false;
    private bool isUploading = false;
    private bool isLoading = true;
    private bool IsEdit => Id.HasValue;
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"ContentEdit OnInitializedAsync: ManualId = {ManualId}");
        
        // ManualIdが0以下の場合は無効
        if (ManualId <= 0)
        {
            Console.WriteLine("エラー: ManualIdが無効です");
            Navigation.NavigateTo("/manuals");
            return;
        }
        
        // 権限チェックのみをOnInitializedAsyncで実行（画面表示前にリダイレクト）
        Console.WriteLine("OnInitializedAsync: 権限チェックを開始");
        var hasPermission = await CheckUserPermissions();
        Console.WriteLine($"OnInitializedAsync: 権限チェック結果 = {hasPermission}");
        
        if (!hasPermission)
        {
            Console.WriteLine("エラー: 権限がありません");
            Navigation.NavigateTo($"/manuals/view/{ManualId}");
            return;
        }

        // 既存の手順を取得（UI表示のために必要）
        var contentsEnumerable = await ContentService.GetContentsByManualIdAsync(ManualId);
        existingContents = contentsEnumerable.OrderByDescending(c => c.Order).ToList();
        Console.WriteLine($"OnInitializedAsync: 既存の手順数 = {existingContents.Count}");

        Console.WriteLine("OnInitializedAsync: 権限チェック成功、処理を続行");
        // isLoadingはOnAfterRenderAsyncの最後までtrueのままにする
        
        // 状態を同期してOnAfterRenderAsyncでmanualが参照できるようにする
        StateHasChanged();
    }
    
    private async Task<bool> CheckUserPermissions()
    {
        try
        {
            Console.WriteLine($"権限チェック開始: ManualId = {ManualId}");
            
            // 権限チェック用にmanualを取得し、クラス変数にも保存
            manual = await ManualService.GetManualByIdAsync(ManualId);
            Console.WriteLine($"権限チェック用Manual取得: manual = {(manual != null ? "存在" : "null")}");
            
            if (manual == null) 
            {
                Console.WriteLine("権限チェック失敗: Manualが見つかりません");
                return false;
            }

            var currentUserId = CurrentUserService.UserId;
            Console.WriteLine($"現在のユーザーID: {currentUserId}");
            Console.WriteLine($"ManualのOwnerId: {manual.OwnerId}");

            // マニュアルの所有者の場合は編集可能
            if (manual.OwnerId == currentUserId)
            {
                Console.WriteLine("権限チェック成功: マニュアルの所有者です");
                return true;
            }

            // グループメンバーの場合、権限をチェック
            var userMembership = await GroupService.GetUserMembershipAsync(CurrentUserService.UserId);
            Console.WriteLine($"ユーザーメンバーシップ: userMembership = {(userMembership != null ? "存在" : "null")}");
            
            if (userMembership != null && userMembership.Group != null)
            {
                Console.WriteLine($"グループID: {userMembership.Group.GroupId}");
                Console.WriteLine($"グループ権限: {userMembership.Permission}");
                
                // グループのマニュアルの場合、権限をチェック
                if (manual.OwnerId == userMembership.Group.GroupId.ToString())
                {
                    Console.WriteLine("グループのマニュアルです");
                    
                    if (userMembership.Permission == GroupPermission.ViewOnly)
                    {
                        Console.WriteLine("権限チェック失敗: ViewOnly権限です");
                        return false;
                    }
                    else if (userMembership.Permission == GroupPermission.PartialEdit)
                    {
                        Console.WriteLine("PartialEdit権限、カテゴリー権限をチェック");
                        // 一部編集可の場合、カテゴリーのAllowPartialEditをチェック
                        var categoryResult = await CheckCategoryPermission();
                        Console.WriteLine($"カテゴリー権限チェック結果: {categoryResult}");
                        return categoryResult;
                    }
                    else
                    {
                        Console.WriteLine("権限チェック成功: 編集可能権限です");
                        // 編集可の場合は常に編集可能
                        return true;
                    }
                }
                else
                {
                    Console.WriteLine("権限チェック失敗: グループのマニュアルではありません");
                    return false;
                }
            }
            else
            {
                Console.WriteLine("権限チェック失敗: グループメンバーシップがありません");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"権限チェックエラー: {ex.Message}");
            return false;
        }
    }

    private async Task<bool> CheckCategoryPermission()
    {
        try
        {
            Console.WriteLine("カテゴリー権限チェック開始");
            
            // manualは既にCheckUserPermissionsで取得済み
            Console.WriteLine($"カテゴリー権限チェック用Manual: manual = {(manual != null ? "存在" : "null")}");
            
            if (manual?.CategoryId == null) 
            {
                Console.WriteLine("カテゴリー権限チェック失敗: CategoryIdがnullです");
                return false;
            }
            
            Console.WriteLine($"カテゴリーID: {manual.CategoryId}");
            
            // カテゴリーのAllowPartialEditをチェック
            var category = await CategoryService.GetCategoryByIdAsync(manual.CategoryId);
            Console.WriteLine($"カテゴリー取得: category = {(category != null ? "存在" : "null")}");
            Console.WriteLine($"AllowPartialEdit: {category?.AllowPartialEdit}");
            
            var result = category?.AllowPartialEdit ?? false;
            Console.WriteLine($"カテゴリー権限チェック結果: {result}");
            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"カテゴリー権限チェックエラー: {ex.Message}");
            return false;
        }
    }
    
    private async Task CheckMobileAndRedirect()
    {
        try
        {
            var isMobile = await JSRuntime.InvokeAsync<bool>("isMobileDevice");
            Console.WriteLine($"CheckMobileAndRedirect: isMobile = {isMobile}");
            if (isMobile)
            {
                Console.WriteLine("モバイルデバイス検出: ホームページにリダイレクト");
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"CheckMobileAndRedirect エラー: {ex.Message}");
            // JavaScript実行に失敗した場合は何もしない
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine($"OnAfterRenderAsync開始: ManualId = {ManualId}, IsEdit = {IsEdit}");
            Console.WriteLine($"OnAfterRenderAsync開始時: manual = {(manual != null ? "存在" : "null")}");
            Console.WriteLine($"OnAfterRenderAsync開始時: isLoading = {isLoading}");
            
            // モバイル表示の場合はホームページにリダイレクト
            await CheckMobileAndRedirect();
            Console.WriteLine("CheckMobileAndRedirect完了");
            
            // manualがnullの場合は再取得（OnInitializedAsyncとOnAfterRenderAsyncが異なるインスタンスの場合がある）
            if (manual == null)
            {
                Console.WriteLine("OnAfterRenderAsync: manualがnullのため再取得");
                
                // DbContextの同時実行エラーを回避するために少し待機
                await Task.Delay(100);
                
                manual = await ManualService.GetManualByIdAsync(ManualId);
                Console.WriteLine($"OnAfterRenderAsync: Manual再取得結果 = {(manual != null ? "存在" : "null")}");
                
                if (manual == null)
                {
                    Console.WriteLine("エラー: Manualの再取得に失敗");
                    Navigation.NavigateTo("/manuals");
                    return;
                }
            }
            else
            {
                Console.WriteLine($"OnAfterRenderAsync: manual = 存在（再取得不要）");
            }
            
            Console.WriteLine("Manual確認完了、処理を続行");
            
            try
            {
                // 既存の手順はOnInitializedAsyncで既に取得済み
                Console.WriteLine($"OnAfterRenderAsync: 既存の手順数 = {existingContents.Count}");

                if (IsEdit && Id.HasValue)
                {
                    var existingContent = await ContentService.GetContentByIdAsync(Id.Value);
                    if (existingContent is not null)
                    {
                        // 既存のcontentオブジェクトを完全に置き換え
                        content = existingContent;
                        Console.WriteLine("編集モード: 既存のコンテンツを読み込み");
                    }
                    else
                    {
                        Navigation.NavigateTo($"/manuals/view/{ManualId}");
                        return;
                    }
                }
                else
                {
                    Console.WriteLine("新規作成時の初期化を開始");
                    // 新規作成時の初期化
                    var userId = CurrentUserService.UserId;
                    if (string.IsNullOrEmpty(userId))
                    {
                        Console.WriteLine("警告: CurrentUserService.UserId が null または空です");
                        Navigation.NavigateTo($"/manuals/view/{ManualId}");
                        return;
                    }
                    
                    Console.WriteLine($"新規作成時の初期化: ManualId = {ManualId}, UserId = {userId}");
                    Console.WriteLine($"初期化前のcontent.ManualId = {content.ManualId}");
                    
                    content = new Content
                    {
                        ManualId = ManualId,
                        Order = 1, // 一時的な値、保存時に正しい値が設定される
                        CreatorId = userId,
                        CreatedAt = DateTime.UtcNow,
                        Image = new Image
                        {
                            FilePath = "", // 空文字列で初期化
                            ImageId = 0 // 新しいImageオブジェクトとして初期化
                        }
                    };
                    
                    Console.WriteLine($"Content初期化後: content.ManualId = {content.ManualId}");
                }
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task SaveContent()
    {
        isSaving = true;
        try
        {
            Console.WriteLine($"SaveContent開始: IsEdit = {IsEdit}, content.ManualId = {content.ManualId}, ManualId = {ManualId}");
            
            if (IsEdit)
            {
                await ContentService.UpdateContentAsync(content);
            }
            else
            {
                await ContentService.AddContentAsync(content);
            }
            
            // 保存後はデータを再読み込み
            Navigation.NavigateTo($"/manuals/view/{ManualId}", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"エラー: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null) return;
        await UploadImageFile(e.File);
    }

    private async Task OnPaste(ClipboardEventArgs e)
    {
        if (isUploading) return;

        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));
            var imageData = await JSRuntime.InvokeAsync<string>("getClipboardImage");
            
            if (!string.IsNullOrEmpty(imageData))
            {
                if (imageData.Length > 2 * 1024 * 1024)
                {
                    return;
                }
                
                var bytes = Convert.FromBase64String(imageData.Split(',')[1]);
                using var stream = new MemoryStream(bytes);
                await UploadImageFromStream(stream, $"clipboard_{Guid.NewGuid()}.png");
            }
        }
        catch (OperationCanceledException)
        {
            // タイムアウトは無視
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("No interop methods are registered"))
        {
            // 接続切断時のエラーは無視
            Console.WriteLine("接続が切断されています。クリップボード機能は利用できません。");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"クリップボード貼り付けエラー: {ex.Message}");
        }
    }

    private Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "v" && e.CtrlKey)
        {
            // Ctrl+Vの処理はOnPasteで行う
        }
        return Task.CompletedTask;
    }


    private async Task OnTextKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            var currentText = content.Text ?? "";
            var newlineCount = currentText.Count(c => c == '\n');
            
            // 改行数が5を超える場合はEnter入力を無効化
            if (newlineCount >= 5)
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("eval", @"
                        const element = document.getElementById('text');
                        if (element) {
                            // 最後の改行を削除
                            const text = element.value;
                            if (text.endsWith('\n')) {
                                element.value = text.slice(0, -1);
                            }
                            element.setSelectionRange(element.value.length, element.value.length);
                            element.focus();
                        }
                    ");
                }
                catch (InvalidOperationException ex) when (ex.Message.Contains("No interop methods are registered"))
                {
                    // 接続切断時は無視
                    Console.WriteLine("接続が切断されています。改行制限機能は利用できません。");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"改行制限エラー: {ex.Message}");
                }
            }
        }
    }

    private async Task UploadImageFile(IBrowserFile file)
    {
        using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        await UploadImageFromStream(stream, file.Name);
    }

    private async Task UploadImageFromStream(Stream stream, string fileName)
    {
        isUploading = true;
        try
        {
            var userId = CurrentUserService.UserId;
            var s3Key = $"{userId}/{ManualId}/{content.ContentId}/{fileName}";

            var s3Url = await S3Service.UploadFileAsync(stream, s3Key);

            if (content.Image != null && !string.IsNullOrEmpty(content.Image.FilePath))
            {
                try
                {
                    // URL形式をチェック
                    if (Uri.IsWellFormedUriString(content.Image.FilePath, UriKind.Absolute))
                    {
                        await S3Service.DeleteFileAsync(content.Image.FilePath);
                    }
                }
                catch (Exception deleteEx)
                {
                    Console.WriteLine($"ファイル削除エラー: {deleteEx.Message}");
                    // 削除に失敗してもアップロードは続行
                }
            }

            content.Image = new Image
            {
                FilePath = s3Url,
                ContentId = content.ContentId > 0 ? content.ContentId : 0 // 新規作成時は0
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"画像アップロードエラー: {ex.Message}");
            throw; // エラーを再スローして呼び出し元で処理
        }
        finally
        {
            isUploading = false;
        }
    }

    private async Task RemoveImage()
    {
        if (content.Image != null)
        {
            await S3Service.DeleteFileAsync(content.Image.FilePath);
            // 新規作成時は空のImageオブジェクトを設定、編集時はnullに設定
            if (IsEdit)
            {
                content.Image = null;
            }
            else
            {
                content.Image = new Image { FilePath = "", ImageId = 0 };
            }
        }
    }

    private void Cancel()
    {
        // キャッシュを無効化してデータを再読み込み
        Navigation.NavigateTo($"/manuals/view/{ManualId}", forceLoad: true);
    }

    public void Dispose()
    {
        // リソースのクリーンアップ（現在は不要）
    }

    private async Task OpenImageAnnotator()
    {
        Console.WriteLine($"OpenImageAnnotator呼び出し: content.Image = {(content.Image != null ? "存在" : "null")}");
        Console.WriteLine($"content.Image.FilePath = '{content.Image?.FilePath ?? "null"}'");
        
        bool hasImage = content.Image != null && !string.IsNullOrEmpty(content.Image.FilePath);
        Console.WriteLine($"hasImage = {hasImage}");
        
        if (hasImage)
        {
            try
            {
                // サーバーサイドで画像を取得してBase64エンコード
                var imageUrl = content.Image?.FilePath;
                if (!string.IsNullOrEmpty(imageUrl))
                {
                    using var httpClient = new HttpClient();
                    var imageBytes = await httpClient.GetByteArrayAsync(imageUrl);
                    var base64String = Convert.ToBase64String(imageBytes);
                    var dataUrl = $"data:image/png;base64,{base64String}";
                    
                    // JavaScript側でDataURLをBlobに変換してクリップボードにコピー
                    try
                    {
                        var copySuccess = await JSRuntime.InvokeAsync<bool>("copyDataUrlToClipboard", dataUrl);
                        if (!copySuccess)
                        {
                            hasImage = false;
                        }
                    }
                    catch (InvalidOperationException ex) when (ex.Message.Contains("No interop methods are registered"))
                    {
                        // 接続切断時は無視
                        Console.WriteLine("接続が切断されています。画像コピー機能は利用できません。");
                        hasImage = false;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"画像コピーエラー: {ex.Message}");
                        hasImage = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"画像コピーエラー: {ex.Message}");
                hasImage = false;
            }
        }
        
        var result = await DialogService.OpenAsync<ClipboardAnnotator>("画像加工", 
            new Dictionary<string, object> { { "HasImage", hasImage } },
            new DialogOptions() { Width = "80vw", Height = "90vh", Left = "-210px", Resizable = true, Draggable = true });

        if (result != null)
        {
            var processedImageData = result.ToString();
            Console.WriteLine($"ClipboardAnnotatorから戻ってきました: result = {(result != null ? "存在" : "null")}");
            Console.WriteLine($"processedImageData = {(string.IsNullOrEmpty(processedImageData) ? "空" : "存在")}");
            
            if (!string.IsNullOrEmpty(processedImageData))
            {
                try
                {
                    // DataURLの形式をチェック
                    if (processedImageData.StartsWith("data:image/"))
                    {
                        Console.WriteLine("加工画像をアップロードします");
                        var bytes = Convert.FromBase64String(processedImageData.Split(',')[1]);
                        using var stream = new MemoryStream(bytes);
                        await UploadImageFromStream(stream, $"processed_{Guid.NewGuid()}.png");
                        Console.WriteLine("加工画像のアップロード完了");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"加工画像のアップロードエラー: {ex.Message}");
                }
            }
        }
        else
        {
            Console.WriteLine("ClipboardAnnotatorからnullが返されました");
        }
    }
}