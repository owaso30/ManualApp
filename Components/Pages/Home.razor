@page "/"
@rendermode InteractiveServer
@using ManualApp.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Navigation
@inject IGroupService GroupService
@inject ICurrentUserService CurrentUserService
@inject IModeService ModeService
@inject IJSRuntime JSRuntime

<div class="container mt-4" style="position: relative;">
    @if (isSignedIn && currentUser != null)
    {
        <!-- ログイン済みユーザー向けの画面 -->
        <div class="row justify-content-center">
            <div class="col-12 col-lg-6">
                <div class="card border-0" style="box-shadow: none;">
                    <div class="card-header text-white text-center mb-2" style="background-color: #4a6b8a;">
                        <i class="fas fa-rocket fa-3x"></i>
                        <h2 class="mb-0">ManualApp</h2>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <h5 class="text-primary mb-3">
                                    <i class="fas fa-info-circle me-2"></i>アカウント情報
                                </h5>
                                <div class="list-group list-group-flush">
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <span><i class="fas fa-envelope me-2 text-muted"></i>Email</span>
                                        <span class="badge bg-light text-dark">@currentUser.Email</span>
                                    </div>
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <span><i class="fas fa-user me-2 text-muted"></i>表示名</span>
                                        <span class="badge bg-light text-dark">@currentUser.DisplayName</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        @if (canSwitchMode)
                        {
                            <div class="row mt-4">
                                <div class="col-12">
                                    <h5 class="text-primary mb-3">
                                        <i class="fas fa-cogs me-2"></i>表示モード設定
                                    </h5>
                                    <div class="card border-primary">
                                        <div class="card-body">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" 
                                                       id="modeSwitch" 
                                                       checked="@isGroupMode"
                                                       @onchange="OnModeChanged">
                                                <label class="form-check-label" for="modeSwitch">
                                                    <i class="fas fa-users me-2"></i>
                                                    @(isGroupMode ? "グループモード" : "個人モード")
                                                </label>
                                            </div>
                                            <small class="text-muted mt-2 d-block">
                                                @if (isGroupMode)
                                                {
                                                    <span>グループのマニュアルとカテゴリーを表示します</span>
                                                }
                                                else
                                                {
                                                    <span>個人のマニュアルとカテゴリーを表示します</span>
                                                }
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- グループ参加申請通知 -->
        @if (pendingRequests.Any())
        {
            <div class="row justify-content-center mt-4">
                <div class="col-12 col-lg-6">
                    <div class="alert alert-warning">
                        <h6><i class="fas fa-bell me-2"></i>グループ参加申請が届いています</h6>
                        <p class="mb-2">@pendingRequests.Count 件のグループ参加申請が処理待ちです。</p>
                        <a href="/groups" class="btn btn-warning btn-sm">
                            <i class="fas fa-cog me-1"></i>グループ管理で確認
                        </a>
                    </div>
                </div>
            </div>
        }

        <!-- マニュアル一覧へのリンク -->
        <div class="row justify-content-center mt-4">
            <div class="col-12 col-lg-6">
                <div class="d-grid">
                    <a href="/manuals" class="btn btn-primary btn-lg">
                        <i class="fas fa-list me-2"></i>マニュアル一覧へ
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- 未ログインユーザー向けの画面 -->
        <div class="row justify-content-center">
            <div class="col-12 col-lg-6">
                <div class="card border-0" style="box-shadow: none;">
                    <div class="card-header text-white text-center mb-2" style="background-color: #4a6b8a;">
                        <i class="fas fa-rocket fa-3x"></i>
                        <h2 class="mb-0">ManualApp</h2>
                    </div>
                    <div class="card-body text-center">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="card h-30 border-0 bg-light">
                                    <div class="card-body">
                                        <a href="/Identity/Account/Register" class="btn btn-primary">
                                            <i class="fas fa-user-plus"></i> 新規登録
                                        </a>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card h-30 border-0 bg-light">
                                    <div class="card-body">
                                        <a href="/Identity/Account/Login" class="btn btn-success">
                                            <i class="fas fa-sign-in-alt"></i> ログイン
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <hr class="my-4">
                        
                        <div class="row">
                            <div class="col-12">
                                <div class="alert alert-info text-start">
                                    <i class="fas fa-info-circle me-2"></i>
                                    ログインページでは、メールアドレス・パスワードでのログインに加えて、Googleアカウントでの簡単ログインもご利用いただけます。
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@if (isLoading)
{
    <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: white; display: flex; align-items: flex-start; justify-content: center; z-index: 9999; padding-top: 200px;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">読み込み中...</span>
            </div>
            <div class="mt-3 fs-5">読み込み中...</div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool isSignedIn = false;
    private ApplicationUser? currentUser;
    private List<GroupJoinRequest> pendingRequests = new();
    private bool canSwitchMode = false;
    private bool isGroupMode = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserInfo();
            StateHasChanged();
        }
    }

    private async Task LoadUserInfo()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            isSignedIn = authState.User.Identity?.IsAuthenticated ?? false;

            if (isSignedIn && authState.User.Identity?.Name != null)
            {
                // ユーザー情報を取得
                currentUser = await UserManager.FindByEmailAsync(authState.User.Identity.Name);
                
                // メール未確認の場合はログアウト状態として扱う
                if (currentUser != null && !currentUser.EmailConfirmed)
                {
                    await SignInManager.SignOutAsync();
                    isSignedIn = false;
                    currentUser = null;
                }
                else if (currentUser != null)
                {
                        // モード切替の初期化
                        try
                        {
                            canSwitchMode = await ModeService.CanSwitchToGroupModeAsync();
                            var currentMode = ModeService.CurrentMode;
                            isGroupMode = currentMode == ViewMode.Group;
                        }
                        catch (Exception)
                        {
                            canSwitchMode = false;
                            isGroupMode = true;
                        }
                    
                    // グループ参加申請の通知を取得
                    try
                    {
                        pendingRequests = await GroupService.GetPendingJoinRequestsAsync(CurrentUserService.UserId);
                    }
                    catch
                    {
                        // エラーが発生した場合は空のリストにする
                        pendingRequests = new List<GroupJoinRequest>();
                    }
                }
            }
        }
        catch (Exception)
        {
            // エラーが発生した場合はログアウト状態にする
            isSignedIn = false;
            currentUser = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnModeChanged(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            var newMode = value ? ViewMode.Group : ViewMode.Personal;
            
            try
            {
                // グループモードに切り替えようとする場合、グループに所属しているかチェック
                if (newMode == ViewMode.Group && !canSwitchMode)
                {
                    // グループに所属していない場合は個人モードに強制切り替え
                    await ModeService.SetModeAsync(ViewMode.Personal);
                    await JSRuntime.InvokeVoidAsync("setCookie", "CurrentViewMode", ViewMode.Personal.ToString(), 30);
                    isGroupMode = false;
                    StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("alert", "グループに所属していないため、個人モードに切り替わりました。");
                    return;
                }
                
                // サーバーサイドでCookieを設定
                await ModeService.SetModeAsync(newMode);
                
                // JavaScript InteropでCookieを設定（確実性を高めるため）
                await JSRuntime.InvokeVoidAsync("setCookie", "CurrentViewMode", newMode.ToString(), 30);
                
                isGroupMode = value;
                
                // UIを更新
                StateHasChanged();
                
                // 少し待ってからページをリロードしてモード変更を反映
                await Task.Delay(100);
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
            catch (Exception)
            {
                // スイッチを元の状態に戻す
                StateHasChanged();
            }
        }
    }
}