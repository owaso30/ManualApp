@page "/manuals"
@rendermode InteractiveServer
@attribute [Authorize]
@inject ManualService ManualService
@inject ICurrentUserService CurrentUserService
@inject NavigationManager Navigation
@inject CategoryService CategoryService

<div style="position: relative;">
    <h3>マニュアル一覧</h3>

    <div class="mb-3 d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <label for="categoryFilter" class="form-label me-2 mb-0">カテゴリー:</label>
            <select id="categoryFilter" class="form-select" style="width: 200px;" @onchange="OnCategoryFilterChanged">
                <option value="">すべて</option>
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId" selected="@(selectedCategoryId == category.CategoryId)">@category.Name</option>
                }
            </select>
        </div>
        <button class="btn btn-primary btn-mobile-hidden" @onclick="CreateManual">
            <span class="bi bi-plus-circle"></span> 追加
        </button>
    </div>

    @if (filteredManuals.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped" style="line-height: 2;">
                <thead>
                    <tr>
                        <th>タイトル</th>
                        <th class="mobile-hidden-column">カテゴリー</th>
                        <th class="mobile-hidden-column">作成日</th>
                        <th class="mobile-hidden-column">操作</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var manual in filteredManuals)
                    {
                        <tr>
                            <td>@manual.Title</td>
                            <td class="mobile-hidden-column">@manual.Category.Name</td>
                            <td class="mobile-hidden-column">@manual.CreatedAt.ToString("yyyy/MM/dd")</td>
                            <td class="mobile-hidden-column">
                                <button class="btn btn-sm btn-outline-primary me-2 btn-mobile-hidden" @onclick="() => EditManual(manual.ManualId)">
                                    <span class="bi bi-pencil"></span> 編集
                                </button>
                                <button class="btn btn-sm btn-outline-danger btn-mobile-hidden" @onclick="() => DeleteManual(manual.ManualId)">
                                    <span class="bi bi-trash"></span> 削除
                                </button>
                            </td>
                            <td class="text-end">
                                <button class="btn btn-sm" style="background-color: #28a745; border: none; color: white; box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4); transition: all 0.3s ease;" @onclick="() => ViewManual(manual.ManualId)">
                                    <span class="bi bi-eye-fill"></span> 
                                    <span class="d-none d-lg-inline">表示</span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (!isLoading)
    {
        <div class="alert alert-info">
            <span class="bi bi-info-circle"></span> マニュアルがありません。
        </div>
    }

    @if (isLoading)
    {
        <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: white; display: flex; align-items: flex-start; justify-content: center; z-index: 9999; padding-top: 200px;">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">読み込み中...</span>
                </div>
                <div class="mt-3 fs-5">読み込み中...</div>
            </div>
        </div>
    }
</div>

@code {
    private List<Manual> manuals = new();
    private List<Manual> filteredManuals = new();
    private List<Category> categories = new();
    private bool isLoading = true;
    private int? selectedCategoryId = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
            await LoadManuals();
            StateHasChanged();
        }
    }

    private async Task LoadManuals()
    {
        isLoading = true;
        try
        {
            var userId = CurrentUserService.UserId;
            var manualsEnumerable = await ManualService.GetManualsByUserAsync(userId);
            manuals = manualsEnumerable.ToList();
            ApplyFilter();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            var categoriesEnumerable = await CategoryService.GetAllCategoriesAsync();
            categories = categoriesEnumerable.ToList();
        }
        catch
        {
            categories = new List<Category>();
        }
    }

    private void ApplyFilter()
    {
        if (selectedCategoryId.HasValue)
        {
            filteredManuals = manuals.Where(m => m.CategoryId == selectedCategoryId.Value).ToList();
        }
        else
        {
            filteredManuals = manuals.ToList();
        }
    }

    private async Task OnCategoryFilterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int categoryId))
        {
            selectedCategoryId = categoryId;
        }
        else
        {
            selectedCategoryId = null;
        }
        
        ApplyFilter();
        await InvokeAsync(StateHasChanged);
    }

    private void CreateManual()
    {
        Navigation.NavigateTo("/manuals/edit");
    }

    private void EditManual(int id)
    {
        Navigation.NavigateTo($"/manuals/edit/{id}");
    }

    private void ViewManual(int id)
    {
        Navigation.NavigateTo($"/manuals/view/{id}");
    }

    private async Task DeleteManual(int id)
    {
        var result = await ManualService.DeleteManualAsync(id);
        if (result)
        {
            await LoadManuals();
        }
    }
}