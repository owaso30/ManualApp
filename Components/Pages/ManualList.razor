@page "/manuals"
@rendermode InteractiveServer
@attribute [Authorize]
@inject ManualService ManualService
@inject ICurrentUserService CurrentUserService
@inject NavigationManager Navigation
@inject CategoryService CategoryService
@inject IGroupService GroupService
@inject IModeService ModeService
@inject IJSRuntime JSRuntime
@using ManualApp.Models

<div style="position: relative;">
    <h3>マニュアル一覧</h3>

    <div class="mb-3 d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <label for="categoryFilter" class="form-label me-2 mb-0">カテゴリー:</label>
            <select id="categoryFilter" class="form-select" style="width: 200px;" @onchange="OnCategoryFilterChanged">
                <option value="">すべて</option>
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId" selected="@(selectedCategoryId == category.CategoryId)">@category.Name</option>
                }
            </select>
        </div>
        <button class="btn btn-primary btn-mobile-hidden" @onclick="CreateManual" disabled="@(!CanCreateManual())">
            <span class="bi bi-plus-circle"></span> 追加
        </button>
    </div>

    @if (filteredManuals.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped" style="line-height: 2;">
                <thead>
                    <tr>
                        <th>タイトル</th>
                        <th class="mobile-hidden-column">カテゴリー</th>
                        <th class="mobile-hidden-column">作成者</th>
                        <th class="mobile-hidden-column">作成日</th>
                        <th class="mobile-hidden-column">操作</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var manual in filteredManuals)
                    {
                        <tr>
                            <td>@(manual.Title.Length > 20 ? manual.Title.Substring(0, 20) + "..." : manual.Title)</td>
                            <td class="mobile-hidden-column">@(manual.Category.Name.Length > 8 ? manual.Category.Name.Substring(0, 8) + "..." : manual.Category.Name)</td>
                            <td class="mobile-hidden-column">@{
                                var creatorEmail = manual.Creator?.Email ?? "不明";
                                @(creatorEmail.Length > 30 ? creatorEmail.Substring(0, 30) + "..." : creatorEmail)
                            }</td>
                            <td class="mobile-hidden-column">@manual.CreatedAt.ToString("yyyy/MM/dd")</td>
                            <td class="mobile-hidden-column">
                                <button class="btn btn-sm btn-outline-primary me-2 btn-mobile-hidden" 
                                        @onclick="() => EditManual(manual.ManualId)"
                                        disabled="@(!CanEditManual(manual))">
                                    <span class="bi bi-pencil"></span> 編集
                                </button>
                                <button class="btn btn-sm btn-outline-danger me-2 btn-mobile-hidden" 
                                        @onclick="() => ConfirmDeleteManual(manual.ManualId)"
                                        disabled="@(!CanDeleteManual(manual))">
                                    <span class="bi bi-trash"></span> 削除
                                </button>
                                @if (IsPersonalMode() && CanTransferToGroup(manual))
                                {
                                    <button class="btn btn-sm btn-outline-success btn-mobile-hidden" 
                                            @onclick="() => TransferManualToGroup(manual.ManualId)"
                                            title="グループ所有に変更">
                                        <span class="bi bi-people"></span> グループ所有
                                    </button>
                                }
                            </td>
                            <td class="text-end">
                                <button class="btn btn-sm" style="background-color: #28a745; border: none; color: white; box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4); transition: all 0.3s ease;" @onclick="() => ViewManual(manual.ManualId)">
                                    <span class="bi bi-eye-fill"></span> 
                                    <span class="d-none d-lg-inline">表示</span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (!isLoading)
    {
        <div class="alert alert-info">
            <span class="bi bi-info-circle"></span> マニュアルがありません。
        </div>
    }

    @if (isLoading)
    {
        <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: white; display: flex; align-items: flex-start; justify-content: center; z-index: 9999; padding-top: 200px;">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">読み込み中...</span>
                </div>
                <div class="mt-3 fs-5">読み込み中...</div>
            </div>
        </div>
    }
</div>

@code {
    private List<Manual> manuals = new();
    private List<Manual> filteredManuals = new();
    private List<Category> categories = new();
    private bool isLoading = true;
    private int? selectedCategoryId = null;
    private GroupMembership? userMembership;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
            await LoadManuals();
            StateHasChanged();
        }
    }

    private async Task LoadManuals()
    {
        isLoading = true;
        try
        {
            var userId = CurrentUserService.UserId;
            var manualsEnumerable = await ManualService.GetManualsByUserAsync(userId);
            manuals = manualsEnumerable.ToList();
            
            // ユーザーのグループメンバーシップを取得
            userMembership = await GroupService.GetUserMembershipAsync(CurrentUserService.UserId);
            
            ApplyFilter();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            var categoriesEnumerable = await CategoryService.GetAllCategoriesAsync();
            categories = categoriesEnumerable.ToList();
        }
        catch
        {
            categories = new List<Category>();
        }
    }

    private void ApplyFilter()
    {
        if (selectedCategoryId.HasValue)
        {
            filteredManuals = manuals.Where(m => m.CategoryId == selectedCategoryId.Value).ToList();
        }
        else
        {
            filteredManuals = manuals.ToList();
        }
    }

    private async Task OnCategoryFilterChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int categoryId))
        {
            selectedCategoryId = categoryId;
        }
        else
        {
            selectedCategoryId = null;
        }
        
        ApplyFilter();
        await InvokeAsync(StateHasChanged);
    }

    private void CreateManual()
    {
        Navigation.NavigateTo("/manuals/edit");
    }

    private void EditManual(int id)
    {
        Navigation.NavigateTo($"/manuals/edit/{id}");
    }

    private void ViewManual(int id)
    {
        Navigation.NavigateTo($"/manuals/view/{id}");
    }

    private async Task ConfirmDeleteManual(int id)
    {
        var manual = manuals.FirstOrDefault(m => m.ManualId == id);
        if (manual != null)
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"マニュアル「{manual.Title}」を削除しますか？この操作は取り消せません。");
            if (confirmed)
            {
                await DeleteManual(id);
            }
        }
    }

    private async Task DeleteManual(int id)
    {
        var result = await ManualService.DeleteManualAsync(id);
        if (result)
        {
            await LoadManuals();
        }
    }

    private bool CanEditManual(Manual manual)
    {
        // 管理者は常に編集可能
        if (CurrentUserService.IsAdmin)
            return true;

        // 自分のマニュアルは編集可能
        if (manual.OwnerId == CurrentUserService.UserId)
            return true;

        // グループ機能の権限チェック
        if (userMembership != null)
        {
            // 編集可権限の場合は編集可能
            if (userMembership.Permission == GroupPermission.FullEdit)
                return true;

            // 一部編集可の場合、デフォルトカテゴリーのマニュアルは編集不可
            if (userMembership.Permission == GroupPermission.PartialEdit)
            {
                // デフォルトカテゴリーのマニュアルは編集不可
                var category = categories.FirstOrDefault(c => c.CategoryId == manual.CategoryId);
                if (category?.IsDefault == true)
                    return false;
                
                // デフォルトカテゴリー以外で、AllowPartialEditがtrueなら編集可能
                return category?.AllowPartialEdit ?? false;
            }

            // 閲覧可の場合は編集不可
            if (userMembership.Permission == GroupPermission.ViewOnly)
                return false;
        }

        return false;
    }

    private bool CanDeleteManual(Manual manual)
    {
        // 管理者は常に削除可能
        if (CurrentUserService.IsAdmin)
            return true;

        // 自分のマニュアルは削除可能
        if (manual.OwnerId == CurrentUserService.UserId)
            return true;

        // グループ機能の権限チェック
        if (userMembership != null)
        {
            // 編集可権限の場合は削除可能
            if (userMembership.Permission == GroupPermission.FullEdit)
                return true;

            // 一部編集可と閲覧可の場合は削除不可
            if (userMembership.Permission == GroupPermission.PartialEdit || 
                userMembership.Permission == GroupPermission.ViewOnly)
                return false;
        }

        return false;
    }

    private bool IsPersonalMode()
    {
        return ModeService.CurrentMode == ViewMode.Personal;
    }

    private bool CanCreateManual()
    {
        // 管理者は常に作成可能
        if (CurrentUserService.IsAdmin)
            return true;

        // グループメンバーの場合の権限チェック
        if (userMembership != null)
        {
            // フル編集権限の場合は作成可能
            if (userMembership.Permission == GroupPermission.FullEdit)
                return true;

            // 一部編集可の場合は、AllowPartialEdit=trueのカテゴリーが存在する場合のみ作成可能
            if (userMembership.Permission == GroupPermission.PartialEdit)
                return GetSelectableCategoriesForPartialEdit().Any();

            // 閲覧可の場合は作成不可
            if (userMembership.Permission == GroupPermission.ViewOnly)
                return false;
        }

        // グループに所属していない場合は作成可能
        return true;
    }

    private List<Category> GetSelectableCategoriesForPartialEdit()
    {
        return categories.Where(c => c.AllowPartialEdit).ToList();
    }

    private bool CanTransferToGroup(Manual manual)
    {
        // 管理者は常に変更可能
        if (CurrentUserService.IsAdmin)
            return true;

        // 個人所有のマニュアルのみ変更可能
        if (manual.OwnerId == CurrentUserService.UserId)
            return true;

        // グループメンバーの場合の権限チェック
        if (userMembership != null)
        {
            // フル編集権限の場合は変更可能
            if (userMembership.Permission == GroupPermission.FullEdit)
                return true;

            // 一部編集可と閲覧可の場合は変更不可
            if (userMembership.Permission == GroupPermission.PartialEdit || 
                userMembership.Permission == GroupPermission.ViewOnly)
                return false;
        }

        return false;
    }

    private async Task TransferManualToGroup(int manualId)
    {
        try
        {
            // 確認ダイアログを表示
            var manual = manuals.FirstOrDefault(m => m.ManualId == manualId);
            var manualTitle = manual?.Title ?? "マニュアル";
            
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"「{manualTitle}」をグループ所有に変更します。\n\n実行すると個人所有には戻せません。\n本当に実行しますか？");
            
            if (!confirmed)
                return;

            var success = await ManualService.TransferManualToGroupAsync(manualId);
            if (success)
            {
                // マニュアル一覧を再読み込み
                await LoadManuals();
                StateHasChanged();
                
                // 成功メッセージを表示
                await JSRuntime.InvokeVoidAsync("alert", $"「{manualTitle}」をグループ所有に変更しました。");
            }
            else
            {
                // エラーメッセージを表示
                await JSRuntime.InvokeVoidAsync("alert", "グループ所有への変更に失敗しました。");
            }
        }
        catch (Exception)
        {
            // エラーハンドリング
            await JSRuntime.InvokeVoidAsync("alert", "エラーが発生しました。");
        }
    }
}