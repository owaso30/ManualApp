@page "/categories"
@rendermode InteractiveServer
@attribute [Authorize]
@inject CategoryService CategoryService
@inject NavigationManager Navigation

<div style="position: relative;">
    <h3>カテゴリー管理</h3>

    <div class="mb-3 d-flex justify-content-end">
        <button class="btn btn-primary" @onclick="CreateCategory">
            <span class="bi bi-plus-circle"></span> 追加
        </button>
    </div>

    @if (categories.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped" style="line-height: 2;">
                <thead>
                    <tr>
                        <th>名前</th>
                        <th>説明</th>
                        <th>マニュアル数</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in categories)
                    {
                        <tr>
                            <td>@category.Name</td>
                            <td>@(category.Description ?? "-")</td>
                            <td>@category.Manuals.Count</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-2" 
                                        @onclick="() => EditCategory(category.CategoryId)"
                                        disabled="@category.IsDefault">
                                    <span class="bi bi-pencil"></span> 編集
                                </button>
                                <button class="btn btn-sm btn-outline-danger" 
                                        @onclick="() => DeleteCategory(category.CategoryId)"
                                        disabled="@(category.IsDefault)">
                                    <span class="bi bi-trash"></span> 削除
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (!isLoading)
    {
        <div class="alert alert-info">
            <span class="bi bi-info-circle"></span> カテゴリーがありません。
        </div>
    }

    @if (isLoading)
    {
        <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: white; display: flex; align-items: flex-start; justify-content: center; z-index: 9999; padding-top: 200px;">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">読み込み中...</span>
                </div>
                <div class="mt-3 fs-5">読み込み中...</div>
            </div>
        </div>
    }
</div>

@code {
    private List<Category> categories = new();
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        isLoading = true;
        try
        {
            var categoriesEnumerable = await CategoryService.GetAllCategoriesAsync();
            categories = categoriesEnumerable.ToList();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreateCategory()
    {
        Navigation.NavigateTo("/categories/edit");
    }

    private void EditCategory(int id)
    {
        Navigation.NavigateTo($"/categories/edit/{id}");
    }

    private async Task DeleteCategory(int id)
    {
        var canDelete = await CategoryService.CanDeleteCategoryAsync(id);
        if (!canDelete)
        {
            // ここでアラートを表示する処理を追加できます
            return;
        }

        var result = await CategoryService.DeleteCategoryAsync(id);
        if (result)
        {
            await LoadCategories();
        }
    }
}
