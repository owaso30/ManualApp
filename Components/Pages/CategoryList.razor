@page "/categories"
@rendermode InteractiveServer
@attribute [Authorize]
@inject CategoryService CategoryService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ICurrentUserService CurrentUserService
@inject IGroupService GroupService
@inject IModeService ModeService

<!-- モバイル制限メッセージ -->
<div class="mobile-restriction-message">
    <div class="mobile-restriction-content">
        <i class="fas fa-mobile-alt mobile-restriction-icon"></i>
        <div class="mobile-restriction-title">モバイル表示では利用できません</div>
        <div class="mobile-restriction-text">
            この機能はデスクトップ表示でのみご利用いただけます。<br>
            画面幅を広げるか、デスクトップブラウザでアクセスしてください。
        </div>
        <a href="/" class="btn btn-primary">ホームに戻る</a>
    </div>
</div>

<div class="mobile-restricted-content" style="position: relative;">
    <h3>カテゴリー管理</h3>

    <div class="mb-3 d-flex justify-content-end">
        <button class="btn btn-primary btn-mobile-hidden" @onclick="CreateCategory" disabled="@(!CanCreateCategory())">
            <span class="bi bi-plus-circle"></span> 追加
        </button>
    </div>

    @if (categories.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped" style="line-height: 2;">
                    <thead>
                        <tr>
                            <th>名前</th>
                            <th>作成者</th>
                            <th>作成日</th>
                            <th>使用</th>
                            <th>編集</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                <tbody>
                    @foreach (var category in categories)
                    {
                        <tr>
                            <td>@(category.Name.Length > 8 ? category.Name.Substring(0, 8) + "..." : category.Name)</td>
                            <td>@{
                                var creatorEmail = category.Creator?.Email ?? "システム";
                                @(creatorEmail.Length > 30 ? creatorEmail.Substring(0, 30) + "..." : creatorEmail)
                            }</td>
                            <td>@category.CreatedAt.ToString("yyyy/MM/dd")</td>
                            <td>@category.ManualCount</td>
                            <td>
                                @if (category.AllowPartialEdit)
                                {
                                    <span class="badge bg-success" style="font-size: 0.8rem; padding: 0.4rem 0.6rem; min-width: 3rem; display: inline-block;">可</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger" style="font-size: 0.8rem; padding: 0.4rem 0.6rem; min-width: 3rem; display: inline-block;">不可</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-2 btn-mobile-hidden" 
                                        @onclick="() => EditCategory(category.CategoryId)"
                                        disabled="@(!CanEditCategory(category))">
                                    <span class="bi bi-pencil"></span> 編集
                                </button>
                                <button class="btn btn-sm btn-outline-danger me-2 btn-mobile-hidden" 
                                        @onclick="() => ConfirmDeleteCategory(category.CategoryId)"
                                        disabled="@(!CanDeleteCategory(category))">
                                    <span class="bi bi-trash"></span> 削除
                                </button>
                                @if (IsPersonalMode() && CanTransferToGroup(category))
                                {
                                    <button class="btn btn-sm btn-outline-success btn-mobile-hidden" 
                                            @onclick="() => TransferCategoryToGroup(category.CategoryId)"
                                            title="グループ所有に変更">
                                        <span class="bi bi-people"></span> グループ所有
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (!isLoading)
    {
        <div class="alert alert-info">
            <span class="bi bi-info-circle"></span> カテゴリーがありません。
        </div>
    }

    @if (isLoading)
    {
        <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: white; display: flex; align-items: flex-start; justify-content: center; z-index: 9999; padding-top: 200px;">
            <div class="text-center">
                <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">読み込み中...</span>
                </div>
                <div class="mt-3 fs-5">読み込み中...</div>
            </div>
        </div>
    }
</div>

@code {
    private List<Category> categories = new();
    private bool isLoading = true;
    private GroupMembership? userMembership;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // モバイル表示の場合はホームページにリダイレクト
            await CheckMobileAndRedirect();
            await LoadCategories();
            StateHasChanged();
        }
    }

    private async Task CheckMobileAndRedirect()
    {
        try
        {
            var isMobile = await JSRuntime.InvokeAsync<bool>("isMobileDevice");
            if (isMobile)
            {
                Navigation.NavigateTo("/");
            }
        }
        catch
        {
            // JavaScript実行に失敗した場合は何もしない
        }
    }

    private async Task LoadCategories()
    {
        isLoading = true;
        try
        {
            var categoriesEnumerable = await CategoryService.GetAllCategoriesAsync();
            categories = categoriesEnumerable.ToList();
            
            // ユーザーのグループメンバーシップを取得（エラーハンドリング付き）
            try
            {
                userMembership = await GroupService.GetUserMembershipAsync(CurrentUserService.UserId);
            }
            catch (Exception)
            {
                // エラーが発生した場合はnullのまま
                userMembership = null;
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CreateCategory()
    {
        Navigation.NavigateTo("/categories/edit");
    }

    private void EditCategory(int id)
    {
        Navigation.NavigateTo($"/categories/edit/{id}");
    }

    private async Task ConfirmDeleteCategory(int id)
    {
        var category = categories.FirstOrDefault(c => c.CategoryId == id);
        if (category != null)
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"カテゴリー「{category.Name}」を削除しますか？この操作は取り消せません。");
            if (confirmed)
            {
                await DeleteCategory(id);
            }
        }
    }

    private async Task DeleteCategory(int id)
    {
        var canDelete = await CategoryService.CanDeleteCategoryAsync(id);
        if (!canDelete)
        {
            // ここでアラートを表示する処理を追加できます
            return;
        }

        var result = await CategoryService.DeleteCategoryAsync(id);
        if (result)
        {
            await LoadCategories();
        }
    }

    private bool CanEditCategory(Category category)
    {
        // 管理者は常に編集可能
        if (CurrentUserService.IsAdmin)
            return true;

        // デフォルトカテゴリーは編集不可
        if (category.IsDefault)
            return false;

        // 自分のカテゴリーは編集可能
        if (category.OwnerId == CurrentUserService.UserId)
            return true;

        // グループ機能の権限チェック
        if (userMembership != null)
        {
            // 編集可権限の場合は編集可能
            if (userMembership.Permission == GroupPermission.FullEdit)
                return true;

            // 一部編集可と閲覧可の場合は編集不可
            if (userMembership.Permission == GroupPermission.PartialEdit || 
                userMembership.Permission == GroupPermission.ViewOnly)
                return false;
        }

        return false;
    }

    private bool CanEditManualsInCategory(Category category)
    {
        // 管理者は常に編集可能
        if (CurrentUserService.IsAdmin)
            return true;

        // 自分のカテゴリーは編集可能
        if (category.OwnerId == CurrentUserService.UserId)
            return true;

        // グループ機能の権限チェック
        if (userMembership != null)
        {
            // 編集可権限の場合は編集可能
            if (userMembership.Permission == GroupPermission.FullEdit)
                return true;

            // 一部編集可の場合は編集可能
            if (userMembership.Permission == GroupPermission.PartialEdit)
                return true;

            // 閲覧可の場合は編集不可
            if (userMembership.Permission == GroupPermission.ViewOnly)
                return false;
        }

        return false;
    }

    private bool CanDeleteCategory(Category category)
    {
        // 管理者は常に削除可能
        if (CurrentUserService.IsAdmin)
            return true;

        // デフォルトカテゴリーは削除不可
        if (category.IsDefault)
            return false;

        // 自分のカテゴリーのみ削除可能
        if (category.OwnerId == CurrentUserService.UserId)
            return true;

        // グループメンバーの場合の権限チェック
        if (userMembership != null)
        {
            // フル編集権限の場合は削除可能
            if (userMembership.Permission == GroupPermission.FullEdit)
                return true;

            // 一部編集可と閲覧可の場合は削除不可
            if (userMembership.Permission == GroupPermission.PartialEdit || 
                userMembership.Permission == GroupPermission.ViewOnly)
                return false;
        }

        // グループメンバーでも他者のカテゴリーは削除不可
        return false;
    }

    private bool IsPersonalMode()
    {
        return ModeService.CurrentMode == ViewMode.Personal;
    }

    private bool CanCreateCategory()
    {
        // 管理者は常に作成可能
        if (CurrentUserService.IsAdmin)
            return true;

        // グループメンバーの場合の権限チェック
        if (userMembership != null)
        {
            // フル編集権限の場合は作成可能
            if (userMembership.Permission == GroupPermission.FullEdit)
                return true;

            // 一部編集可と閲覧可の場合は作成不可
            if (userMembership.Permission == GroupPermission.PartialEdit || 
                userMembership.Permission == GroupPermission.ViewOnly)
                return false;
        }

        // グループに所属していない場合は作成可能
        return true;
    }

    private bool CanTransferToGroup(Category category)
    {
        // 管理者は常に変更可能
        if (CurrentUserService.IsAdmin)
            return true;

        // デフォルトカテゴリーは変更不可
        if (category.IsDefault)
            return false;

        // 個人所有のカテゴリーのみ変更可能
        if (category.OwnerId == CurrentUserService.UserId)
            return true;

        // グループメンバーの場合の権限チェック
        if (userMembership != null)
        {
            // フル編集権限の場合は変更可能
            if (userMembership.Permission == GroupPermission.FullEdit)
                return true;

            // 一部編集可と閲覧可の場合は変更不可
            if (userMembership.Permission == GroupPermission.PartialEdit || 
                userMembership.Permission == GroupPermission.ViewOnly)
                return false;
        }

        return false;
    }

    private async Task TransferCategoryToGroup(int categoryId)
    {
        try
        {
            // 確認ダイアログを表示
            var category = categories.FirstOrDefault(c => c.CategoryId == categoryId);
            var categoryName = category?.Name ?? "カテゴリー";
            
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"「{categoryName}」をグループ所有に変更します。\n\n実行すると個人所有には戻せません。\n本当に実行しますか？");
            
            if (!confirmed)
                return;

            var success = await CategoryService.TransferCategoryToGroupAsync(categoryId);
            if (success)
            {
                // カテゴリー一覧を再読み込み
                await LoadCategories();
                StateHasChanged();
                
                // 成功メッセージを表示
                await JSRuntime.InvokeVoidAsync("alert", $"「{categoryName}」をグループ所有に変更しました。");
            }
            else
            {
                // エラーメッセージを表示
                await JSRuntime.InvokeVoidAsync("alert", "グループ所有への変更に失敗しました。");
            }
        }
        catch (Exception)
        {
            // エラーハンドリング
            await JSRuntime.InvokeVoidAsync("alert", "エラーが発生しました。");
        }
    }
}
