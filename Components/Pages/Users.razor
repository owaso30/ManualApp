@* @page "/users"
@rendermode InteractiveServer
@inject Data.ManualAppContext Db

<h3>ユーザー管理 (CRUD) ✨</h3>

@if (users == null)
{
    <p>読み込み中…</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>UserId</th>
                <th>UserName</th>
                <th>Email</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in users)
            {
                <tr>
                    <td>@u.UserId</td>
                    <td>
                        @if (editUser?.UserId == u.UserId)
                        {
                            <input @bind="editUser.UserName" class="form-control" />
                        }
                        else
                        {
                            @u.UserName
                        }
                    </td>
                    <td>
                        @if (editUser?.UserId == u.UserId)
                        {
                            <input @bind="editUser.Email" class="form-control" />
                        }
                        else
                        {
                            @u.Email
                        }
                    </td>
                    <td>
                        @if (editUser?.UserId == u.UserId)
                        {
                            <button class="btn btn-success btn-sm" @onclick="SaveUser">保存</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">キャンセル</button>
                        }
                        else
                        {
                            <button class="btn btn-primary btn-sm" @onclick="() => EditUser(u)">編集</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(u.UserId)">削除</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<h4>新しいユーザーを追加</h4>
<input @bind="newUserName" placeholder="ユーザー名" class="form-control mb-2" />
<input @bind="newEmail" placeholder="メール" class="form-control mb-2" />
<button class="btn btn-primary" @onclick="AddUser">追加</button>

@code {
    private List<User> users;
    private string newUserName;
    private string newEmail;

    // 編集用オブジェクト
    private User editUser;

    protected override void OnInitialized()
    {
        users = Db.Users.ToList();
    }

    // Create
    void AddUser()
    {
        if (!string.IsNullOrWhiteSpace(newUserName) && !string.IsNullOrWhiteSpace(newEmail))
        {
            var user = new User { UserName = newUserName, Email = newEmail };
            Db.Users.Add(user);
            Db.SaveChanges();

            newUserName = string.Empty;
            newEmail = string.Empty;
            users = Db.Users.ToList();
        }
    }

    // Update
    void EditUser(User user)
    {
        // 編集用にコピーを作る（直接参照を編集すると元データが即変わってしまうため）
        editUser = new User
        {
            UserId = user.UserId,
            UserName = user.UserName,
            Email = user.Email
        };
    }

    void SaveUser()
    {
        var user = Db.Users.FirstOrDefault(u => u.UserId == editUser.UserId);
        if (user != null)
        {
            user.UserName = editUser.UserName;
            user.Email = editUser.Email;
            Db.SaveChanges();
            users = Db.Users.ToList();
        }
        editUser = null;
    }

    void CancelEdit()
    {
        editUser = null;
    }

    // Delete
    void DeleteUser(int userId)
    {
        var user = Db.Users.FirstOrDefault(u => u.UserId == userId);
        if (user != null)
        {
            Db.Users.Remove(user);
            Db.SaveChanges();
            users = Db.Users.ToList();
        }
    }
} *@
